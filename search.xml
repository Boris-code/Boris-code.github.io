<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>feapder</title>
    <url>/2021/03/01/feapder/</url>
    <content><![CDATA[<h1 id="FEAPDER"><a href="#FEAPDER" class="headerlink" title="FEAPDER"></a>FEAPDER</h1><p><img src="https://img.shields.io/badge/python-3.6-brightgreen" alt=""> </p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>feapder</strong> 是一款简单、快速、轻量级的爬虫框架。起名源于 fast、easy、air、pro、spider的缩写，以开发快速、抓取快速、使用简单、功能强大为宗旨，历时4年倾心打造。支持分布式爬虫、批次爬虫、多模板爬虫，以及完善的爬虫报警机制。</p>
<p>之前一直在公司内部使用，已使用本框架采集100+数据源，日采千万数据。现在开源，供大家学习交流！</p>
<p>读音: <code>[ˈfiːpdə]</code></p>
<p>官方文档：<a href="http://boris.org.cn/feapder/" target="_blank" rel="noopener">http://boris.org.cn/feapder/</a></p>
<p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2021/02/22/16139928869250.jpg?x-oss-process=style/markdown-media" alt=""></p>
<a id="more"></a>

<h2 id="环境要求："><a href="#环境要求：" class="headerlink" title="环境要求："></a>环境要求：</h2><ul>
<li>Python 3.6.0+</li>
<li>Works on Linux, Windows, macOS</li>
</ul>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>From PyPi:</p>
<pre><code>pip3 install feapder</code></pre><p>From Git:</p>
<pre><code>pip3 install git+https://github.com/Boris-code/feapder.git</code></pre><p>若安装出错，请参考<a href="https://boris.org.cn/feapder/#/question/%E5%AE%89%E8%A3%85%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">安装问题</a></p>
<h2 id="功能概览"><a href="#功能概览" class="headerlink" title="功能概览"></a>功能概览</h2><h3 id="1-支持周期性采集"><a href="#1-支持周期性采集" class="headerlink" title="1. 支持周期性采集"></a>1. 支持周期性采集</h3><p>周期性抓取是爬虫中常见的需求，如每日抓取一次商品的销量等，我们把每个周期称为一个批次。</p>
<p>这类爬虫，普遍做法是设置个定时任务，每天启动一次。但你有没有想过，若由于某种原因，定时任务启动程序时没启动起来怎么办？比如服务器资源不够了，启动起来直接被kill了。</p>
<p>另外如何保证每条数据在每个批次内都得以更新呢？</p>
<p>本框架支持批次采集，引入了批次表的概念，详细记录了每一批次的抓取状态</p>
<p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/12/20/16084680404224.jpg?x-oss-process=style/markdown-media" alt="-w899"></p>
<h3 id="2-支持分布式采集"><a href="#2-支持分布式采集" class="headerlink" title="2. 支持分布式采集"></a>2. 支持分布式采集</h3><p>面对海量的数据，分布式采集必不可少的，本框架支持分布式，且可随时重启爬虫，任务不丢失</p>
<h3 id="3-支持多模板采集"><a href="#3-支持多模板采集" class="headerlink" title="3. 支持多模板采集"></a>3. 支持多模板采集</h3><p>有时我们要采集数十个数据源，采集的结构化信息一致，通常我们会编写数十个爬虫，然后启动数十个窗口去采集，这样我们管理起来比较麻烦。本框架支持将多种数据源（多模板）集成到一个爬虫里来管理，降低维护成本</p>
<h3 id="4-支持海量数据去重"><a href="#4-支持海量数据去重" class="headerlink" title="4. 支持海量数据去重"></a>4. 支持海量数据去重</h3><p>框架内置3种去重机制，通过简单的配置可对任务及数据自动去重，也可拿出来单独作为模块使用，支持批量去重。</p>
<ol>
<li>临时去重：处理一万条数据约0.26秒。 去重1亿条数据占用内存约1.43G，可指定去重的失效周期</li>
<li>内存去重：处理一万条数据约0.5秒。 去重一亿条数据占用内存约285MB</li>
<li>永久去重：处理一万条数据约3.5秒。去重一亿条数据占用内存约285MB</li>
</ol>
<h3 id="5-数据自动入库"><a href="#5-数据自动入库" class="headerlink" title="5. 数据自动入库"></a>5. 数据自动入库</h3><p>只需要根据数据库表自动生成item，然后给item属性赋值，直接yield 返回即可批量入库</p>
<h3 id="6-支持Debug模式"><a href="#6-支持Debug模式" class="headerlink" title="6. 支持Debug模式"></a>6. 支持Debug模式</h3><p>爬虫支持debug模式，debug模式下默认数据不入库、不修改任务状态。可针对某个任务进行调试，方便开发</p>
<h3 id="7-完善的报警机制"><a href="#7-完善的报警机制" class="headerlink" title="7. 完善的报警机制"></a>7. 完善的报警机制</h3><p>为了保证数据的全量性、准确性、时效性，本框架内置报警机制，有了这些报警，我们可以实时掌握爬虫状态</p>
<ol>
<li><p>实时计算爬虫抓取速度，估算剩余时间，在指定的抓取周期内预判是否会超时</p>
<p> <img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/12/20/16084718683378.jpg?x-oss-process=style/markdown-media" alt="-w657"></p>
</li>
</ol>
<ol start="2">
<li><p>爬虫卡死报警</p>
<p> <img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/12/20/16084718974597.jpg?x-oss-process=style/markdown-media" alt="-w501"></p>
</li>
<li><p>爬虫任务失败数过多报警，可能是由于网站模板改动或封堵导致</p>
<p> <img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/12/29/16092335882158.jpg?x-oss-process=style/markdown-media" alt="-w416"></p>
</li>
</ol>
<h3 id="8-下载监控"><a href="#8-下载监控" class="headerlink" title="8. 下载监控"></a>8. 下载监控</h3><p>框架对请求总数、成功数、失败数、解析异常数进行监控，将数据点打入到infuxdb，结合Grafana面板，可方便掌握抓取情况</p>
<p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2021/02/09/16128568548280.jpg?x-oss-process=style/markdown-media" alt="-w1299"></p>
<h2 id="学习交流"><a href="#学习交流" class="headerlink" title="学习交流"></a>学习交流</h2><p>官方文档：<a href="http://boris.org.cn/feapder/" target="_blank" rel="noopener">http://boris.org.cn/feapder/</a></p>
<p>知识星球：</p>
<p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/16/zhi-shi-xing-qiu.jpeg" alt="知识星球"></p>
<p>星球会不定时分享爬虫技术干货，涉及的领域包括但不限于js逆向技巧、爬虫框架刨析、爬虫技术分享等</p>
]]></content>
  </entry>
  <entry>
    <title>vscode 使用技巧</title>
    <url>/2020/05/13/vscode-%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="使用虚拟环境"><a href="#使用虚拟环境" class="headerlink" title="使用虚拟环境"></a>使用虚拟环境</h1><ol>
<li><p>创建虚拟环境</p>
<p> pip install virtualenv<br> virtualenv venv</p>
</li>
<li><p>使用虚拟环境</p>
<p> command + shift +p 选择python解释器<br> 选择./venv/bin/python</p>
</li>
</ol>
<a id="more"></a>

<h1 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h1><ol>
<li>打开系统终端 ctrl + ` (mac 也是这个快捷键)</li>
<li>全局搜索/替换 Ctrl + Shift + f</li>
<li>重新打开刚关闭的标签页 command + shift + t</li>
<li>删除上一个单词 window: Ctrl + Backspace (Mac: option + delete)</li>
<li>跳到文件开头或结尾 command + 上下方向键</li>
<li>上下移动代码 option + 上下方向键</li>
<li>控制光标，选多行 commannd + optio + 上下方向键 </li>
<li>显示/隐藏左侧目录栏 commannd + b</li>
<li>复制当前行为多行 option + shift + 上下方向键</li>
<li>查找文件/安装vs code 插件地址：ctrl + p</li>
<li>拆分编辑器 : ctrl + 2/3</li>
<li>关闭所有窗口 : ctrl + k + w</li>
<li>折叠代码： ctrl + k + 0</li>
<li>展开代码： ctrl + k + j (完全展开代码)</li>
<li>代码格式化 shift + option + f</li>
<li>代码内搜素函数变量等 command + p 然后输入 @</li>
<li>运行 ctrl + F5 可改为 command + b</li>
</ol>
<p>更多快捷键：</p>
<p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/05/13/15893005114254.jpg?x-oss-process=style/markdown-media" alt="-w274"></p>
<h1 id="使用black-格式化"><a href="#使用black-格式化" class="headerlink" title="使用black 格式化"></a>使用black 格式化</h1><p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/05/13/15893004716064.jpg?x-oss-process=style/markdown-media" alt="-w1196"></p>
]]></content>
      <categories>
        <category>开发工具</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title>字体加密破解技术分享-01</title>
    <url>/2020/05/01/%E5%AD%97%E4%BD%93%E5%8A%A0%E5%AF%86%E7%A0%B4%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="1-什么是字体加密"><a href="#1-什么是字体加密" class="headerlink" title="1. 什么是字体加密"></a>1. 什么是字体加密</h2><p>简单的说，字体加密即为<code>所复制非所得</code>。如下图，我们复制<code>186.37万字</code>得到<code>𘠜𘠚𘠗𘠛𘠖𘠔万字</code>。那么这里的186.37这个数字就被加密了，用到的技术为字体加密。</p>
<p>网址：<a href="https://book.qidian.com/info/1013562540" target="_blank" rel="noopener">https://book.qidian.com/info/1013562540</a><br><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/21/15820221913491.jpg" alt="-w1194"></p>
<p>字体加密所用范围也很广，如大众点评、猫眼、起点中文网、landchian等。如果我们直接抓取页面源代码，得到的则为一堆无意义的数据。<br>那么如何把这些无意义的数据解密成他原本的含义呢，下面我将进行详细的讲解。</p>
<a id="more"></a>

<h2 id="2-基本知识"><a href="#2-基本知识" class="headerlink" title="2. 基本知识"></a>2. 基本知识</h2><h3 id="2-1-字体加密原理"><a href="#2-1-字体加密原理" class="headerlink" title="2.1 字体加密原理"></a>2.1 字体加密原理</h3><p>我们所看到的文字，都有对应的字体文件，字体文件描述着每个文字如何绘制。比如下图：</p>
<p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/21/15821960933111.jpg" alt="-w244"><br><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/21/15821961523776.jpg" alt="-w260"></p>
<p>不同的字体文件，绘制出来的<code>爬虫</code>二字形状不一样。这就好比画画一样，不同的人画猫，有的人画出来的是猫，有人画出来的却是虎。懂了这点，那么下图的字体加密就不难理解了：</p>
<p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/21/15821964555239.jpg" alt="-w1374"></p>
<p>上图我们看到的<code>土地基本概况</code> 其实是<code>冋块基鴻戥况</code>通过字体文件绘制出来的，即原本真实的文字应为<code>冋块基鴻戥况</code>。不信你可以去复制这几个文字，然后粘贴下看看，<a href="https://www.landchina.com/DesktopModule/BizframeExtendMdl/workList/bulWorkView.aspx?wmguid=4a611fc4-42b1-4231-ac26-8d25b002dc2b&recorderguid=JYXT_ZJGS_13594&sitePath=" target="_blank" rel="noopener">打开原网页</a>。就好比我们看到的画是虎，其实画画那人画的对象是猫。</p>
<p>总结下：我们所看到的文字，是由字体文件绘制出来的，正常都是将这个文字原本字形绘制出来。但遇到字体反爬这种不正经的字体文件，他把文字<code>男</code>绘制成<code>人妖</code>这种事都干得出来。</p>
<h3 id="2-2-字体文件刨析"><a href="#2-2-字体文件刨析" class="headerlink" title="2.2 字体文件刨析"></a>2.2 字体文件刨析</h3><p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/21/15821972247789.jpg" alt="-w1249"></p>
<p>我们先找到这个网页所用到的字体，并下载下来，用以下几行代码来解析字体保存为xml</p>
<pre><code>from fontTools.ttLib import TTFont

font = TTFont(&quot;vJ3z6kV9Oo0MYQNQhaEWLTMF54ysPI1p.woff&quot;)
font.saveXML(&quot;vJ3z6kV9Oo0MYQNQhaEWLTMF54ysPI1p.xml&quot;)</code></pre><p>这里解释下woff字体</p>
<blockquote>
<p>WOFF（Web开发字体格式）是一种专门为了Web而设计的字体格式标准，实际上是对于TrueType/OpenType等字体格式的封装，每个字体文件中含有字体以及针对字体的元数据（Metadata），字体文件被压缩，以便于网络传输。</p>
</blockquote>
<p>下面分析下这个xml文件：</p>
<p>GlyphOrder 节点下为该字体文件中所包含的文字<br><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/21/15821995970833.jpg" alt="-w670"></p>
<p>TTGlyph 节点下，name为所绘制的文字，contour节点为字型信息。<br><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/21/15822126778809.jpg" alt="-w616"></p>
<p>xMin、xMax、yMin、yMax 为这个文字所在的横纵坐标,如下图：<br><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/21/15822125522407.jpg" alt="-w656"></p>
<p>pt 中的 x, y 为关键点的坐标，on的值 1表示直线，0表示弧形。为了验证on表达的含义，亲自拿标准的微软雅黑用文字<code>十</code>和<code>八</code>做了验证，如下：</p>
<p>文字<code>八</code>，因为八是有弧的，所以on的值有1有0<br><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/21/15822132803667.jpg" alt="-w678"></p>
<p>文字<code>十</code>，on均为1<br><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/21/15822133508484.jpg" alt="-w588"></p>
<p>name 为文字名，一个表识。标准字体的name即为所绘文字的unicode16进制编码。非标准字体name的值是什么，看他心情。我们可以通过如下方法将文字与16进制相互转换。</p>
<pre><code># 转16进制
&gt;&gt;&gt; hex(ord(&apos;十&apos;))
&apos;0x5341&apos;

转回文字
&gt;&gt;&gt; u&apos;\u5341&apos;
&apos;十&apos;</code></pre><h3 id="2-3-破解字体加密"><a href="#2-3-破解字体加密" class="headerlink" title="2.3 破解字体加密"></a>2.3 破解字体加密</h3><blockquote>
<p>此方法适用于知道标准字体是什么</p>
</blockquote>
<h4 id="2-3-1-思路"><a href="#2-3-1-思路" class="headerlink" title="2.3.1 思路"></a>2.3.1 思路</h4><p>看完字体文件刨析之后，我们大致对字体文件有所了解了。一个文字张什么样子是由x、y、on来决定的。<strong>那么当我们拿到一个非标准字体中某个文字的x、y、on后，在对应的标准字体文件中寻找最相近的x、y、on以及其表达的文字，这样所找到的文字即为解密后的文字</strong>。</p>
<p>比如下面这个图，我们拿<code>土地基本情况</code>中的地来举例，从源码中看出<code>地</code>对应的文字为<code>冋</code><br><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/21/15821964555239.jpg" alt="-w1374"><br>从源码中还发现了标准字体为微软雅黑<br><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/21/15822151752003.jpg" alt="-w694"></p>
<p>分别将网页所用的加密字体及标准的微软雅黑字体保存为xml，然后分别在微软雅黑中取<code>地</code>及在加密字体中取<code>冋</code>的字型，对比如下</p>
<ol>
<li><p>先计算下<code>地</code>与<code>冋</code>的16进制</p>
<pre><code>&gt;&gt;&gt; hex(ord(&apos;地&apos;))
&apos;0x5730&apos;
&gt;&gt;&gt; hex(ord(&apos;冋&apos;))
&apos;0x518b&apos;</code></pre></li>
<li><p>字形对比</p>
<p> <img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/21/15822154822831.jpg" alt="-w1365"></p>
<p> 观察字形可以看到标准字体中的<code>地</code>与加密字体中的<code>冋</code>的字型是非常相近的。x,y的缩放比例相同，on的值更是完全的一致。这是因为这俩字型绘制的都是同一个文字<code>地</code>。也就是为什么网页的源码中是<code>冋</code>，而我们在页面中看到的文字是<code>地</code></p>
</li>
</ol>
<h4 id="2-3-2-付出行动"><a href="#2-3-2-付出行动" class="headerlink" title="2.3.2 付出行动"></a>2.3.2 付出行动</h4><p>我们已经有了在标准字体文件中寻找最相近字型的思路，那么下面讲解如何寻找！</p>
<ol>
<li><p>解析标准字体文件，将文字与字型保存为如下关系<br> <img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/21/15822163443876.jpg" alt="-w471"><br> 不同文字的on可能相同，因此on的值为list类型，下面保存了多个相同on值的文字及字型</p>
<p> 我训练完的字体文件如下<br> <img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/21/15822169008177.jpg" alt="-w1196"></p>
</li>
<li><p>解析加密的字体文件，将每个文字、on、及xy对应关系取出来。然后用on值在上面的字典中快速取出一组on值相同的字型（大多数只有一个），然后再在这组字型中匹配一个最相近的字型，得出对应的文字即可</p>
<p> 匹配最相近的字型方法：遍历候选字型，计算每个字型xy的特征与源word xy特征相除后的方差（相除是因为 同一字体xy是成比例缩放的），然后取方差最小的字型。</p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上分别介绍了什么是字体加密、加密原理、字体文件刨析、以及破解思路。破解思路适用于已知标准字体的情况，对于未知标准字体的字体反爬，下期讲解。</p>
<h2 id="了解更多"><a href="#了解更多" class="headerlink" title="了解更多"></a>了解更多</h2><p>欢迎加入知识星球 <a href="https://t.zsxq.com/eEmAeae" target="_blank" rel="noopener">https://t.zsxq.com/eEmAeae</a></p>
<p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/16/zhi-shi-xing-qiu.jpeg" alt="知识星球"></p>
<p>本星球建设目的是为了分享爬虫技术干货，让爬虫技术在星球内不断的沉淀下来，做到知识积累。 星球每周都会分享爬虫技术干货，涉及的领域包括但不限于js逆向技巧、爬虫框架刨析、爬虫技术分享等。期待您的加入，和我们一起探讨爬虫技术，拓展爬虫思维！</p>
<p>QQ 群：750614606</p>
<p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/04/08/wechatimg188.jpeg" alt="WechatIMG188"></p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>字体加密</tag>
      </tags>
  </entry>
  <entry>
    <title>js逆向技巧分享</title>
    <url>/2020/04/14/js%20%E9%80%86%E5%90%91%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>当我们抓取网页端数据时，经常被加密参数、加密数据所困扰，如何快速定位这些加解密函数，尤为重要。本片文章是我逆向js时一些技巧的总结，如有遗漏，欢迎补充。</p>
<p>所需环境：Chrome浏览器</p>
<a id="more"></a>

<h2 id="1-搜索"><a href="#1-搜索" class="headerlink" title="1. 搜索"></a>1. 搜索</h2><h3 id="1-1-全局搜索"><a href="#1-1-全局搜索" class="headerlink" title="1.1 全局搜索"></a>1.1 全局搜索</h3><blockquote>
<p>适用于根据关键词快速定位关键文件及代码</p>
</blockquote>
<p>当前页面右键-&gt;检查，弹出检查工具<br><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/16/15818546991703.jpg" alt="-w771"><br>搜索支持 关键词、正则表达式</p>
<h3 id="1-2-代码内搜索"><a href="#1-2-代码内搜索" class="headerlink" title="1.2 代码内搜索"></a>1.2 代码内搜索</h3><blockquote>
<p>适用于根据关键词快速定位关键代码</p>
</blockquote>
<p>点击代码，然后按ctrl+f 或 command+f 调出搜索框。搜索支持 关键词、css表达式、xpath<br><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/16/15818548355218.jpg" alt="-w567"></p>
<h2 id="2-debug"><a href="#2-debug" class="headerlink" title="2. debug"></a>2. debug</h2><h3 id="2-1-常规debug"><a href="#2-1-常规debug" class="headerlink" title="2.1 常规debug"></a>2.1 常规debug</h3><blockquote>
<p>适用于分析关键函数代码逻辑</p>
</blockquote>
<ol>
<li><p>埋下断点</p>
<p> <img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/16/15818553940142.jpg" alt="-w963"></p>
</li>
<li><p>调试</p>
<p> <img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/16/15818560289237.jpg" alt="-w790"></p>
<p> 如图所示，我标记了1到6，下面分别介绍其含义</p>
<p> 1.执行到下一个端点<br> 2.执行下一步，不会进入所调用的函数内部<br> 3.进入所调用的函数内部<br> 4.跳出函数内部<br> 5.一步步执行代码，遇到有函数调用，则进入函数<br> 6.Call Stack 为代码调用的堆栈信息，代码执行顺序为由下至上，这对于着关键函数前后调用关系很有帮助</p>
</li>
</ol>
<h3 id="2-2-XHR-debug"><a href="#2-2-XHR-debug" class="headerlink" title="2.2 XHR debug"></a>2.2 XHR debug</h3><blockquote>
<p>匹配url中关键词，匹配到则跳转到参数生成处，适用于url中的加密参数全局搜索搜不到，可采用这种方式拦截</p>
</blockquote>
<p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/16/15818564958339.jpg" alt="-w991"></p>
<h3 id="2-3-行为debug"><a href="#2-3-行为debug" class="headerlink" title="2.3 行为debug"></a>2.3 行为debug</h3><blockquote>
<p>适用于点击按钮时，分析代码执行逻辑</p>
</blockquote>
<p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/16/15818568240138.jpg" alt="-w1515"></p>
<p>如图所示，可快速定位点击探索按钮后，所执行的js。</p>
<h2 id="3-查看请求调用的堆栈"><a href="#3-查看请求调用的堆栈" class="headerlink" title="3 查看请求调用的堆栈"></a>3 查看请求调用的堆栈</h2><p>可以在 Network 选项卡下，该请求的 Initiator 列里看到它的调用栈，调用顺序由上而下：</p>
<p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/16/15818572338786.jpg" alt="-w1211"></p>
<h2 id="4-执行堆内存中的函数"><a href="#4-执行堆内存中的函数" class="headerlink" title="4. 执行堆内存中的函数"></a>4. 执行堆内存中的函数</h2><p>当debug到某一个函数时，我们想主动调用，比如传递下自定义的参数，这时可以在检查工具里的console里调用</p>
<p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/16/15818574162547.jpg" alt="-w990"></p>
<p>此处要注意，只有debug打这个函数时，控制台里才可以调用。如果想保留这个函数，可使用this.xxx=xxx 的方式。之后调用时无需debug到xxx函数，直接使用this.xxx 即可。</p>
<h2 id="5-修改堆栈中的参数值"><a href="#5-修改堆栈中的参数值" class="headerlink" title="5. 修改堆栈中的参数值"></a>5. 修改堆栈中的参数值</h2><p> <img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/16/15807829279682.png" alt="1580782927968_2"></p>
<h2 id="6-写js代码"><a href="#6-写js代码" class="headerlink" title="6. 写js代码"></a>6. 写js代码</h2><p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/16/15818584762149.jpg" alt="-w647"></p>
<h2 id="7-打印windows对象的值"><a href="#7-打印windows对象的值" class="headerlink" title="7. 打印windows对象的值"></a>7. 打印windows对象的值</h2><p>在console中输入如下代码，如只打印_$开头的变量值</p>
<pre><code>for (var p in window) {
    if (p.substr(0, 2) !== &quot;_$&quot;) 
        continue;
    console.log(p + &quot; &gt;&gt;&gt; &quot; + eval(p))
}</code></pre><h2 id="8-勾子"><a href="#8-勾子" class="headerlink" title="8. 勾子"></a>8. 勾子</h2><blockquote>
<p>以chrome插件的方式，在匹配到关键词处插入断点</p>
</blockquote>
<h3 id="8-1-cookie钩子"><a href="#8-1-cookie钩子" class="headerlink" title="8.1 cookie钩子"></a>8.1 cookie钩子</h3><blockquote>
<p>用于定位cookie中关键参数生成位置</p>
</blockquote>
<pre><code>var code = function(){
    var org = document.cookie.__lookupSetter__(&apos;cookie&apos;);
    document.__defineSetter__(&quot;cookie&quot;,function(cookie){
        if(cookie.indexOf(&apos;TSdc75a61a&apos;)&gt;-1){
            debugger;
        }
        org = cookie;
    });
    document.__defineGetter__(&quot;cookie&quot;,function(){return org;});
}
var script = document.createElement(&apos;script&apos;);
script.textContent = &apos;(&apos; + code + &apos;)()&apos;;
(document.head||document.documentElement).appendChild(script);
script.parentNode.removeChild(script);</code></pre><p>当cookie中匹配到了 <code>TSdc75a61a</code>， 则插入断点。</p>
<h3 id="8-2-请求钩子"><a href="#8-2-请求钩子" class="headerlink" title="8.2 请求钩子"></a>8.2 请求钩子</h3><blockquote>
<p>用于定位请求中关键参数生成位置</p>
</blockquote>
<pre><code>var code = function(){
var open = window.XMLHttpRequest.prototype.open;
window.XMLHttpRequest.prototype.open = function (method, url, async){
    if (url.indexOf(&quot;MmEwMD&quot;)&gt;-1){
        debugger;
    }
    return open.apply(this, arguments);
};
}
var script = document.createElement(&apos;script&apos;);
script.textContent = &apos;(&apos; + code + &apos;)()&apos;;
(document.head||document.documentElement).appendChild(script);
script.parentNode.removeChild(script);</code></pre><p>当请求的url里包含<code>MmEwMD</code>时，则插入断点</p>
<h3 id="8-3-header钩子"><a href="#8-3-header钩子" class="headerlink" title="8.3 header钩子"></a>8.3 header钩子</h3><blockquote>
<p>用于定位header中关键参数生成位置</p>
</blockquote>
<pre><code>var code = function(){
var org = window.XMLHttpRequest.prototype.setRequestHeader;
window.XMLHttpRequest.prototype.setRequestHeader = function(key,value){
    if(key==&apos;Authorization&apos;){
        debugger;
    }
    return org.apply(this,arguments);
}
}
var script = document.createElement(&apos;script&apos;);
script.textContent = &apos;(&apos; + code + &apos;)()&apos;;
(document.head||document.documentElement).appendChild(script);
script.parentNode.removeChild(script);</code></pre><p>当header中包含<code>Authorization</code>时，则插入断点</p>
<h3 id="8-4-manifest-json"><a href="#8-4-manifest-json" class="headerlink" title="8.4 manifest.json"></a>8.4 manifest.json</h3><blockquote>
<p>插件的配置文件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   &quot;name&quot;: &quot;Injection&quot;,</span><br><span class="line">	&quot;version&quot;: &quot;2.0&quot;,</span><br><span class="line">	&quot;description&quot;: &quot;RequestHeader钩子&quot;,</span><br><span class="line">	&quot;manifest_version&quot;: 2,</span><br><span class="line">	&quot;content_scripts&quot;: [</span><br><span class="line">		&#123;</span><br><span class="line">			&quot;matches&quot;: [</span><br><span class="line">				&quot;&lt;all_urls&gt;&quot;</span><br><span class="line">			],</span><br><span class="line">			&quot;js&quot;: [</span><br><span class="line">				&quot;inject.js&quot;</span><br><span class="line">			],</span><br><span class="line">			&quot;all_frames&quot;: true,</span><br><span class="line">			&quot;permissions&quot;: [</span><br><span class="line">				&quot;tabs&quot;</span><br><span class="line">			],</span><br><span class="line">			&quot;run_at&quot;: &quot;document_start&quot;</span><br><span class="line">		&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><ol>
<li><p>如图所示，创建一个文件夹，文件夹中创建一个钩子函数文件inject.js 及 插件的配置文件 mainfest.json 即可</p>
<p> <img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/16/15818591973251.jpg" alt="-w1447"></p>
</li>
<li><p>打开chrome 的扩展程序, 加载已解压的扩展程序，选择步骤1创建的文件夹即可</p>
<p> <img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/16/15818594196696.jpg" alt="-w634"></p>
</li>
<li><p>切换回原网页，刷新页面，若钩子函数关键词匹配到了，则触发debug</p>
<p> <img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/16/15818596523026.jpg" alt="-w763"></p>
</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上为我做js逆向分析时用到的手段，如有不足之处或更多技巧，欢迎指教补充。愿本文的分享对您之后分析js有所帮助。谢谢～</p>
<h2 id="了解更多"><a href="#了解更多" class="headerlink" title="了解更多"></a>了解更多</h2><p>欢迎加入知识星球 <a href="https://t.zsxq.com/eEmAeae" target="_blank" rel="noopener">https://t.zsxq.com/eEmAeae</a></p>
<p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/16/zhi-shi-xing-qiu.jpeg" alt="知识星球"></p>
<p>本星球建设目的是为了分享爬虫技术干货，让爬虫技术在星球内不断的沉淀下来，做到知识积累。 星球每周都会分享爬虫技术干货，涉及的领域包括但不限于js逆向技巧、爬虫框架刨析、爬虫技术分享等。期待您的加入，和我们一起探讨爬虫技术，拓展爬虫思维！</p>
<p>QQ 群：750614606</p>
<p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/04/08/wechatimg188.jpeg" alt="WechatIMG188"></p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>js逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>MONIO 文件存储服务</title>
    <url>/2020/04/06/MONIO-%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>MinIO 是一个基于Apache License v2.0开源协议的对象存储服务。它兼容亚马逊S3云存储服务接口，非常适合于存储大容量非结构化的数据，例如图片、视频、日志文件、备份数据和容器/虚拟机镜像等，而一个对象文件可以是任意大小，从几kb到最大5T不等。</p>
<p>MinIO是一个非常轻量的服务,可以很简单的和其他应用的结合，类似 NodeJS, Redis 或者 MySQL。</p>
<a id="more"></a>

<h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><h3 id="Docker-容器"><a href="#Docker-容器" class="headerlink" title="Docker 容器"></a>Docker 容器</h3><pre><code>docker pull minio/minio
docker run -p 9000:9000 minio/minio server /data</code></pre><h3 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h3><p>使用 Homebrew安装minio</p>
<pre><code>Copybrew install minio/stable/minio
minio server /data</code></pre><p>下载二进制文件</p>
<pre><code>wget https://dl.min.io/server/minio/release/darwin-amd64/minio
chmod 755 minio
./minio server /data</code></pre><h3 id="GNU-Linux"><a href="#GNU-Linux" class="headerlink" title="GNU/Linux"></a>GNU/Linux</h3><pre><code>wget https://dl.min.io/server/minio/release/linux-amd64/minio
chmod +x minio
./minio server /data</code></pre><h3 id="微软Windows系统"><a href="#微软Windows系统" class="headerlink" title="微软Windows系统"></a>微软Windows系统</h3><p>下载地址：<a href="https://dl.min.io/server/minio/release/windows-amd64/minio.exe" target="_blank" rel="noopener">https://dl.min.io/server/minio/release/windows-amd64/minio.exe</a></p>
<p>运行</p>
<pre><code>minio.exe server D:\data</code></pre><h3 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h3><p>运行时留意打印的参数</p>
<pre><code>AccessKey: 916PB1FPAX34MADOS3DI
SecretKey: qDq9d2C+j4HncPbKJfb+R9x2UXPfUcDtYtnKIB4+</code></pre><h3 id="使用浏览器进行验证"><a href="#使用浏览器进行验证" class="headerlink" title="使用浏览器进行验证"></a>使用浏览器进行验证</h3><p>安装后使用浏览器访问 <a href="http://127.0.0.1:9000" target="_blank" rel="noopener">http://127.0.0.1:9000</a> 如果可以访问，则表示minio已经安装成功。</p>
<h2 id="python-代码示例"><a href="#python-代码示例" class="headerlink" title="python 代码示例"></a>python 代码示例</h2><pre><code># -*- coding: utf-8 -*-
&quot;&quot;&quot;
Created on 2019/7/24 7:49 PM
---------
@summary:
---------
@author: liubo
&quot;&quot;&quot;

from datetime import timedelta

from minio import Minio

minioClient = Minio(
    endpoint=&quot;192.168.0.129:9000&quot;,
    access_key=&quot;916PB1FPAX34MADOS3DI&quot;,
    secret_key=&quot;qDq9d2C+j4HncPbKJfb+R9x2UXPfUcDtYtnKIB4+&quot;,
    secure=False,
)

# 创建bucket 不能重复创建
# minioClient.make_bucket(&quot;files&quot;, location=&quot;us-east-1&quot;)

# 上传文件
etag = minioClient.fput_object(
    &quot;files&quot;, &quot;微信公众号爬虫.jpg&quot;, &quot;/Users/liubo/Downloads/微信公众号爬虫.jpg&quot;
)

print(etag)

# 获取下载地址
presignedURL = minioClient.presigned_get_object(
    &quot;files&quot;, &quot;微信公众号爬虫.jpg&quot;, timedelta(days=7)
)
print(presignedURL)</code></pre><h1 id="使用docker-运行"><a href="#使用docker-运行" class="headerlink" title="使用docker 运行"></a>使用docker 运行</h1><h2 id="下载-1"><a href="#下载-1" class="headerlink" title="下载"></a>下载</h2><pre><code>docker pull minio/minio</code></pre><h2 id="创建本地存储文件夹"><a href="#创建本地存储文件夹" class="headerlink" title="创建本地存储文件夹"></a>创建本地存储文件夹</h2><pre><code># 创建文件下
mkdir /mnt
cd /mnt
mkdir data
mkdir config
# 文件夹授权写权限
sudo chmod -R 777 /mnt/data
sudo chmod -R 777 /mnt/config</code></pre><h2 id="首次运行"><a href="#首次运行" class="headerlink" title="首次运行"></a>首次运行</h2><pre><code>sudo docker run -p 9000:9000 --name minio1 \
-e &quot;MINIO_ACCESS_KEY=AKIAIOSFODNN7EXAMPLE&quot; \
-e &quot;MINIO_SECRET_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY&quot; \
-v /mnt/data:/data \
-v /mnt/config:/root/.minio \
minio/minio server /data</code></pre><p>MINIO_ACCESS_KEY 与 MINIO_SECRET_KEY 为密钥，可修改</p>
<p>停止：</p>
<pre><code>ctrl + c</code></pre><h2 id="再次运行"><a href="#再次运行" class="headerlink" title="再次运行"></a>再次运行</h2><pre><code>docker container start minio1</code></pre><p>停止：</p>
<pre><code>docker container stop minio1</code></pre><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>官方文档：<a href="https://docs.min.io/cn/minio-quickstart-guide.html" target="_blank" rel="noopener">https://docs.min.io/cn/minio-quickstart-guide.html</a></p>
]]></content>
      <categories>
        <category>第三方服务</category>
      </categories>
      <tags>
        <tag>文件存储服务</tag>
      </tags>
  </entry>
  <entry>
    <title>spark入门</title>
    <url>/2020/02/26/spark%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="下载安装spark"><a href="#下载安装spark" class="headerlink" title="下载安装spark"></a>下载安装spark</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="http://spark.apache.org/downloads.html" target="_blank" rel="noopener">http://spark.apache.org/downloads.html</a></p>
<p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/05/07/15827271213569.jpg?x-oss-process=style/markdown-media" alt="-w714"></p>
<p>解压，进入spark根目录，输入bin/spark-shell，出现下图，则安装成功</p>
<p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/05/07/15827306552400.jpg?x-oss-process=style/markdown-media" alt="-w1041"></p>
<a id="more"></a>

<h2 id="IntelliJ-IDEA-导入-spark-依赖"><a href="#IntelliJ-IDEA-导入-spark-依赖" class="headerlink" title="IntelliJ IDEA 导入 spark 依赖"></a>IntelliJ IDEA 导入 spark 依赖</h2><p><strong>方法一：直接导入spark目录下的jars</strong></p>
<p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/05/07/15827804023142.jpg?x-oss-process=style/markdown-media" alt="-w422"><br><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/05/07/15827804575446.jpg?x-oss-process=style/markdown-media" alt="-w1019"></p>
<p><strong>方法二：使用maven导入依赖：</strong></p>
<p>访问maven仓库，搜索spark,选择合适的版本</p>
<p><a href="https://mvnrepository.com/artifact/org.apache.spark/spark-core_2.12/2.4.4" target="_blank" rel="noopener">https://mvnrepository.com/artifact/org.apache.spark/spark-core_2.12/2.4.4</a></p>
<p>复制以下信息<br><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/05/07/15827847467533.jpg?x-oss-process=style/markdown-media" alt="-w1179"></p>
<p>粘贴到pol.xml 的 dependencies 中</p>
<pre><code>&lt;dependencies&gt;
    &lt;!-- https://mvnrepository.com/artifact/org.apache.spark/spark-core --&gt;
    &lt;dependency&gt;
        &lt;groupId&gt;org.apache.spark&lt;/groupId&gt;
        &lt;artifactId&gt;spark-core_2.12&lt;/artifactId&gt;
        &lt;version&gt;2.4.4&lt;/version&gt;
    &lt;/dependency&gt;
&lt;/dependencies&gt;</code></pre><h2 id="编写Scala代码时自动显示变量类型"><a href="#编写Scala代码时自动显示变量类型" class="headerlink" title="编写Scala代码时自动显示变量类型"></a>编写Scala代码时自动显示变量类型</h2><p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/05/07/15827866535894.jpg?x-oss-process=style/markdown-media" alt="-w1015"></p>
<h2 id="maven-配置阿里云的镜像"><a href="#maven-配置阿里云的镜像" class="headerlink" title="maven 配置阿里云的镜像"></a>maven 配置阿里云的镜像</h2><p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/05/07/15827863285899.jpg?x-oss-process=style/markdown-media" alt="-w1016"></p>
<pre><code>http://maven.aliyun.com/nexus/content/repositories/central/
http://maven.aliyun.com/nexus/content/groups/public/</code></pre><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="wordcount"><a href="#wordcount" class="headerlink" title="wordcount"></a>wordcount</h2><p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/05/07/15827340206711.jpg?x-oss-process=style/markdown-media" alt="-w977"><br><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/05/07/15827340794127.jpg?x-oss-process=style/markdown-media" alt="-w1667"></p>
<h1 id="路线"><a href="#路线" class="headerlink" title="路线"></a>路线</h1><p>sparksql<br>scala</p>
<h2 id="了解更多"><a href="#了解更多" class="headerlink" title="了解更多"></a>了解更多</h2><p>欢迎加入知识星球 <a href="https://t.zsxq.com/eEmAeae" target="_blank" rel="noopener">https://t.zsxq.com/eEmAeae</a></p>
<p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/02/16/zhi-shi-xing-qiu.jpeg" alt="知识星球"></p>
<p>本星球建设目的是为了分享爬虫技术干货，让爬虫技术在星球内不断的沉淀下来，做到知识积累。 星球每周都会分享爬虫技术干货，涉及的领域包括但不限于js逆向技巧、爬虫框架刨析、爬虫技术分享等。期待您的加入，和我们一起探讨爬虫技术，拓展爬虫思维！</p>
<p>QQ 群：750614606</p>
<p><img src="http://markdown-media.oss-cn-beijing.aliyuncs.com/2020/04/08/wechatimg188.jpeg" alt="WechatIMG188"></p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>saprk</tag>
      </tags>
  </entry>
  <entry>
    <title>空白符 </title>
    <url>/2019/12/10/%E7%A9%BA%E7%99%BD%E7%AC%A6-xa0/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>我们通常所用的空格是 \x20 ，是在标准ASCII可见字符 0x20~0x7e 范围内。</p>
<p>而\xa0 是不间断空白符 <code>&amp;nbsp;</code> 属于 latin1 （ISO/IEC_8859-1）中的扩展字符集字符，代表空白符nbsp(non-breaking space)。latin1 字符集向下兼容 ASCII （ 0x20~0x7e ）。通常我们见到的字符多数是 latin1 的</p>
<p>比如在 MySQL 数据库中，有如下信息：</p>
<pre><code>&lt;span style=\\&quot;font-size: 16px;\\&quot;&gt;\xa0&lt;/span&gt;</code></pre><p>网页中的正常数据为</p>
<pre><code>&lt;span style=&quot;font-size: 16px;&quot;&gt;&amp;nbsp;&lt;/span&gt;</code></pre><p>网页地址：</p>
<pre><code>https://mp.weixin.qq.com/s?__biz=MjM5ODkyMDE0OQ==&amp;mid=2651784114&amp;idx=2&amp;sn=d16c9e4977dbeb4de26bf49f03a6670f&amp;chksm=bd38c9088a4f401e03f81c97bd2ba0896ef199f262c63bd635ea8dba332ebd1378b49ee376a9&amp;scene=0&amp;xtrack=1#rd</code></pre><a id="more"></a>

<h2 id="排查问题"><a href="#排查问题" class="headerlink" title="排查问题"></a>排查问题</h2><p>起初以为可能是如下问题引起的</p>
<ol>
<li>xpath 解析的问题</li>
<li><code>pymysql.escape_string(value)</code> 处理的问题</li>
</ol>
<p>经排查不都是，排查代码如下：</p>
<pre><code>text = &apos;&lt;span style=&quot;font-size: 16px;&quot;&gt; &lt;/span&gt;&apos;
a = {
    &quot;text&quot;:text
}
print(a)</code></pre><p>输出：</p>
<pre><code>{&apos;text&apos;: &apos;&lt;span style=&quot;font-size: 16px;&quot;&gt;\xa0&lt;/span&gt;&apos;}</code></pre><p>当然，这里没看到<code>&amp;nbsp;</code>, 原因是解析时xpath将<code>&amp;nbsp;</code> 转成了text中的\xa0，因为是空白符，所以看不见</p>
<p>xpath解析代码如下：</p>
<pre><code>from parsel import Selector

text = &apos;&lt;span style=&quot;font-size: 16px;&quot;&gt;&amp;nbsp;&lt;/span&gt;&apos;
selector = Selector(text)
text = selector.xpath(&apos;.&apos;).extract_first()
a = {
    &quot;text&quot;:text
}
print(a)
print(text)</code></pre><p>输出：</p>
<pre><code>{&apos;text&apos;: &apos;&lt;html&gt;&lt;body&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt;\xa0&lt;/span&gt;&lt;/body&gt;&lt;/html&gt;&apos;}
&lt;html&gt;&lt;body&gt;&lt;span style=&quot;font-size: 16px;&quot;&gt; &lt;/span&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>直接用正则替换为空白符</p>
<pre><code>text = re.sub(&apos;\xa0&apos;, &apos;\x20&apos;, text)</code></pre>]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>特殊字符</tag>
      </tags>
  </entry>
  <entry>
    <title>Sublime-Plugin-CreateInit</title>
    <url>/2019/11/14/Sublime-Plugin-CreateInit/</url>
    <content><![CDATA[<h1 id="CreateInit"><a href="#CreateInit" class="headerlink" title="CreateInit"></a>CreateInit</h1><p>This CreateInit plugin for Sublime Text to auto create <code>__init__.py</code> that import all python files into <code>__all__</code></p>
<a id="more"></a>

<h1 id="Plugin-Installation"><a href="#Plugin-Installation" class="headerlink" title="Plugin Installation"></a>Plugin Installation</h1><p><strong>With the Package Control plugin:</strong> The easiest way to install<br><code>CreateInit</code> is through Package Control, which can be found at this site: <a href="http://wbond.net/sublime_packages/package_control" target="_blank" rel="noopener">http://wbond.net/sublime_packages/package_control</a></p>
<p>Once you install Package Control, restart Sublime Text and bring up the<br>Command Palette (<code>Command+Shift+P</code> on OS X, <code>Control+Shift+P</code> on<br>Linux/Windows). Select “Package Control: Install Package”, wait while<br>Package Control fetches the latest package list, then select<br><code>CreateInit</code> when the list appears. The advantage of using this<br>method is that Package Control will automatically keep CreateInit<br>up to date with the latest version.</p>
<p><strong>Without Git:</strong> Download the latest source from <a href="https://github.com/Boris-code/CreateInit" target="_blank" rel="noopener">GitHub</a> and copy<br>the whole directory into the Packages directory.</p>
<p><strong>With Git:</strong> Clone the repository in your Sublime Text Packages directory, located somewhere in user’s “Home” directory:</p>
<pre><code>git clone https://github.com/Boris-code/CreateInit.git</code></pre><p>The “Packages” packages directory is located differently in different<br>platforms. To access the directory use:</p>
<ul>
<li><p>OS X:</p>
<pre><code>Sublime Text -&gt; Preferences -&gt; Browse Packages...</code></pre></li>
<li><p>Linux:</p>
<pre><code>Preferences -&gt; Browse Packages...</code></pre></li>
<li><p>Windows:</p>
<pre><code>Preferences -&gt; Browse Packages...</code></pre></li>
</ul>
<h1 id="Using"><a href="#Using" class="headerlink" title="Using"></a>Using</h1><ul>
<li><p>Start typing code as usual. When you need create <code>__init__.py</code>, You can use bellow shortcut key.</p>
<p>  For Mac OS X:</p>
<ul>
<li><p><code>command + alt + i</code></p>
<p>For Linux:</p>
</li>
<li><p><code>ctrl + alt + i</code></p>
<p>For Windows:</p>
</li>
<li><p><code>ctrl + alt +i</code></p>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>插件</category>
      </categories>
      <tags>
        <tag>sublime 插件</tag>
      </tags>
  </entry>
</search>
